package app

import (
    "context"
    "net/http"
    "os"
    "os/signal"
    "syscall"

    "{{ .ModuleName }}/pkg/logger"
    "{{ .ModuleName }}/internal/config"
)

func Run() error {
    // Load configuration (in real apps you'd parse YAML/env etc.)
    cfg := config.Default()
    _ = cfg // TODO: use cfg for database/redis initialization

    mux := http.NewServeMux()
    mux.HandleFunc("/ping", func(w http.ResponseWriter, r *http.Request) {
        w.WriteHeader(http.StatusOK)
        _, _ = w.Write([]byte("pong"))
    })

    addr := ":8080" // could also come from cfg
    srv := &http.Server{Addr: addr, Handler: mux}

    go func() {
        logger.L.Infow("server started", "addr", addr)
        if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
            logger.L.Errorw("listen error", "error", err)
        }
    }()

    quit := make(chan os.Signal, 1)
    signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
    <-quit

    logger.L.Info("shutting down server â€¦")
    return srv.Shutdown(context.Background())
} 